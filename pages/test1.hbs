<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>Это заголовок тайтл</title>
		<meta name="viewport" content="width=device-width,initial-scale=1.0">
        <link rel = "stylesheet" type = "text/css" href = "css/test1.css">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
        <script defer src="bundle.js"></script>		
	</head>
	<style>
	   			   
    </style>
	<body>
	   <video autoplay loop muted preload = "none" class = "bgvideo">
	       <source src = "/videos/video1.mp4" type = "video/mp4"></source>
	   </video>
	   <header>
	  
	   </header>
	   <div id = "test1" class = "container-fluid">
	       <div class = "row">
		      <div id = "menu" class = "col-2">
			  
			  </div>
			  <div id = "joinedusers" class = "col-2">
			  
			  </div>
			  <div id = "field" class = "col-8">
			     <canvas id = "canvas">
				    
				 </canvas>
			  </div>
		   </div>
	   </div>
	   <script src="https://cdn.jsdelivr.net/npm/socket.io-client@2/dist/socket.io.js"></script>
	   <script src="/socket.io/socket.io.js"></script>
	   <!--<script src="/node_modules/socket.io/client-dist/socket.io.js"></script>-->
	   <script crossorigin src="https://unpkg.com/react@17/umd/react.production.min.js"></script>
       <script crossorigin src="https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"></script>
	   <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
	   <script type="text/babel">
	   import App from './components/test1/App.js';
	   
	   let users = [];
	   let userdata;
	   let j = 0;
	   let socket = io('http://localhost:8888');
	   
		   /* const LoadUser = () =>  {
			    const [newuser,setNewuser] = React.useState([]);
				
				React.useEffect(() => {
				   // Отслеживаем подключение
				  socket.on('connect', function () {
                  // Выводим сообщение подключение
                  
                  // Отслеживание сообщения от сервера со заголовком 'joined'
                  socket.once('joined', function (data) { 
                  // Выводим сообщение от сервера
				  userdata = data;
				  j++;
                  let objuser = {id:j,name:data};
				  setNewuser([...newuser,objuser]);
				  //console.log(users[0].id);
                 });
                 });
				 
				});
				
				/*React.useEffect(() => {
				  setNewuser(connection(users));
				  return() => {
				    socket.off('joined',userdata);
				  }
				});
				
				
				  return <ul>
				           {
	                         newuser.map(function(user,key){
							   return <li key = {user.id}>{user.name}</li>
							 })					   
						   }
				         </ul>;
			}*/
			
			ReactDOM.render(
			  <App/>,
			  document.getElementById("test1")
			)
       </script>
	</body>
	<script>
	    /*let users1 = [];
		let p = 0;
		p++;
		users1.push({id:p,name:'vasya'});
		console.log(users1[0].name);*/
	    /*let joinuser = document.getElementById('joinedusers');
	    let socket = io('http://localhost:8888/');
		// Отслеживаем подключение
                  socket.on('connect', function () {
                  // Выводим сообщение подключение
                  
                  // Отслеживание сообщения от сервера со заголовком 'hello'
                  socket.on('joined', function (data) { 
                  // Выводим сообщение от сервера
                  joinuser.innerHTML = data;
                 });
				 });*/
	    /*let canvas = document.getElementById('canvas');
		let context = canvas.getContext("2d");
		
		let begin = document.getElementById('begin');
		
		let canvasPos = getPosition(canvas);
		let mouseX = 0;
		let mouseY = 0;
		
		begin.onclick = function(){
		  
		}
		
		canvas.addEventListener("mousemove",setMousePosition,false);
		
		function setMousePosition(e){
		   mouseX = e.clientX - canvasPos.x;
           mouseY = e.clientY - canvasPos.y;
           console.log('позиция мышки: ',mouseX,mouseY);
           //context.clearRect(0, 0, canvas.width, canvas.height);
		   
		}
		
	    function update(){	  
		  requestAnimationFrame(update);
		} 
		update();
		
		function getPosition(el) {
         var xPosition = 0;
         var yPosition = 0;

         while (el) {
           xPosition += (el.offsetLeft - el.scrollLeft + el.clientLeft);
           yPosition += (el.offsetTop - el.scrollTop + el.clientTop);
		   
           el = el.offsetParent;
         }
         return {
           x: xPosition,
           y: yPosition
        };
        }*/
    </script>
</html>